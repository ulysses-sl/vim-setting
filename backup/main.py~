import pyglet
from pyglet.gl import *
import Leap
from Leap import CircleGesture, SwipeGesture
import random



def updown(mf):
    if mf == "m":
        return "f"
    else:
        return "m"

def left(aio):
    if aio == "i":
        return "a"
    elif aio == "o":
        return "i"
    else:
        return "o"

def right(aio):
    if aio == "a":
        return "i"
    elif aio == "i":
        return "o"
    else:
        return "a"

class Listener(Leap.Listener):
    finger_names = ['Thumb', 'Index', 'Middle', 'Ring', 'Pinky']
    bone_names = ['Metacarpal', 'Proximal', 'Intermediate', 'Distal']
    state_names = ['STATE_INVALID', 'STATE_START', 'STATE_UPDATE', 'STATE_END']

    def on_init(self, controller):
        print "Initialized"

    def on_connect(self, controller):
        print "Connected"

        # Enable gestures
        controller.enable_gesture(Leap.Gesture.TYPE_CIRCLE)
        controller.enable_gesture(Leap.Gesture.TYPE_SWIPE)

    def on_disconnect(self, controller):
        # Note: not dispatched when running in a debugger.
        print "Disconnected"

    def on_exit(self, controller):
        print "Exited"

    def on_frame(self, controller):
        # Get the most recent frame and report some basic information
        frame = controller.frame()

        gender = "m"
        vowel = "a"
        play = False

        # Get gestures
        for gesture in frame.gestures():
            if gesture.type == Leap.Gesture.TYPE_CIRCLE:
                circle = CircleGesture(gesture)

                if circle.pointable.direction.angle_to(circle.normal) <= Leap.PI/2:
                    clockwiseness = "clockwise"
                else:
                    clockwiseness = "counterclockwise"
                play = True

            if gesture.type == Leap.Gesture.TYPE_SWIPE:
                swipe = SwipeGesture(gesture)
                if abs(swipe.direction[0]) > abs(swipe.direction[1]):
                    if swipe.direction[0] < 0:
                        vowel = left(vowel)
                    else:
                        vowel = right(vowel)
                else:
                    if swipe.direction[1] < 1:
                        gender = updown(gender)
                    else:
                        gender = updown(gender)

        if play:
            random.choice(sound[gender][vowel]).play()

    def state_string(self, state):
        if state == Leap.Gesture.STATE_START:
            return "STATE_START"

        if state == Leap.Gesture.STATE_UPDATE:
            return "STATE_UPDATE"

        if state == Leap.Gesture.STATE_STOP:
            return "STATE_STOP"

        if state == Leap.Gesture.STATE_INVALID:
            return "STATE_INVALID"

def main():
    sound = {"m": {"a": [], "i": [], "o": []},
             "f": {"a": [], "i": [], "o": []}}

    sampleList = {"sampleFA.txt": "fa",
                  "sampleFI.txt": "fi",
                  "sampleFO.txt": "fo",
                  "sampleMA.txt": "ma",
                  "sampleMI.txt": "mi",
                  "sampleMO.txt": "mo"}

    for eachList in sampleList.keys():
        temp = sampleList[eachList]
        files = open(eachList, "r")
        for line in files:
            sound[temp[0]][temp[1]].append(pyglet.resource.media(line.split()[0], streaming=False))
    pyglet.app.run()

    random.choice(sound["m"]["a"]).play()
    # Create a sample listener and controller
    listener = Listener()
    controller = Leap.Controller()

    # Have the sample listener receive events from the controller
    controller.add_listener(listener)

    # Keep this process running until Enter is pressed
    print "Press Enter to quit..."
    try:
        sys.stdin.readline()
    except KeyboardInterrupt:
        pass
    finally:
        # Remove the sample listener when done
        controller.remove_listener(listener)


if __name__ == "__main__":
    main()
