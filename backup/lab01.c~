#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>
#include <assert.h>

void removewhitespace(char s[]) {
    int i = 0;
    int j = 0;
    int len = strlen(s);

    while (j <= len) {
        while (s[j] != '\0' && isspace(s[j])) { j++; }
        s[i++] = s[j++];
    }
}

bool c2pascal(char s[]) {
    int len = strlen(s);
    if (len > 127) { return 0; }

    int i = len;
    while (i > 0) {
        s[i] = s[i-1];
        i--;
    }
    s[i] = len;

    return 1;
}

void pascal2c(char s[]) {
    int len = s[0];
    for (int i = 0; i < len; i++) { s[i] = s[i+1]; }
    s[len] = '\0';
}

#ifndef AUTOTEST
int main(int argc, char **argv)
{
    // strdup makes a newly allocated (malloced) copy of a string
    char *orig = strdup("  a b c");
 
    /* ********************************** */
    /*    test of whitespace removal      */
    /* ********************************** */
    printf("remove whitespace: before <%s>", orig);
    removewhitespace(orig);
    printf(" and after <%s>\n", orig);
    assert(0==strcmp(orig, "abc"));
    free(orig);
 
    /* ********************************** */
    /*  c to pascal and back to c tests   */
    /* ********************************** */
    const char *s2orig = "ABC";
    char s2[] = "ABC";
    c2pascal(s2);
    assert(s2[0] == '\3');
    for (int i = 0; i < strlen(s2orig); i++) {
        assert(s2[i+1] == s2orig[i]);
    }

    pascal2c(s2);
    printf("converted pascal string back to c.  orig: <%s> reconversion: <%s>\n", s2orig, s2);
    assert(0 == strcmp(s2orig, s2));

    printf("If you got here without crashing, then some very basic tests have passed.\n");
 
    return 0;
}
#endif
