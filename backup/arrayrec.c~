#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <ctype.h>
#include <assert.h>


struct record {
    char name[128];
    unsigned char age;
    unsigned char shoe_size;
}; 

int search_by_name(struct record records[], int num_records, 
                   const char *str, int start_index) {
    int len_str = strlen(str);
    if (num_records < 1 || num_records <= start_index) { // base case 1: nothing to match
        //printf("exit 1\n");
        return -1;
    }
    for (int i = start_index; i < num_records; i++) {
        //printf("%s\n", records[i].name);
        int len_name = strlen(records[i].name);
        if (len_str > len_name) { // base case 2: cannot match
        //printf("exit 2\n");
            continue;
        }
        for (int j = 0; j <= len_name - len_str; j++) {
            printf("%c\n", *(records[i].name + j));
            if (strncasecmp(records[i].name + j, str, len_str) == 0) {
        //printf("exit 3\n");
                return i;
            }
        }
    }
        //printf("exit 4\n");
    return -1;
}

int *get_matches(struct record records[], int num_records,
                 const char *str) {
    int* rv = malloc((num_records + 1) * sizeof(int));
    rv[0] = 0;

    int idx = search_by_name(records, num_records, str, 0);
    while (idx != -1) {
        rv[0] += 1;
        rv[rv[0]] = idx;
        idx = search_by_name(records, num_records, str, idx + 1);
    }

    return rv;
}


#ifndef AUTOTEST
int main(int argc, char **argv) {
    printf ("*** testing search_by_name\n");

    struct record records[] = { {"Alice",18,6}, {"Bob",17,7},{"Claudia",18,49}, {"bobby", 0, 0} };

    int rv = search_by_name(records, 4, "alice", 0);
    assert(rv == 0);

    rv = search_by_name(records, 4, "audi", 1);
    assert(rv == 2);

    rv = search_by_name(records, 4, "alice", 1);
    assert(rv == -1);

    printf ("*** testing get_matches\n");

    int *matches = NULL; 
    matches = get_matches(records, 4, "bob");
    assert(matches[0] == 2);
    assert(matches[1] == 1);
    assert(matches[2] == 3);
    free(matches); // this shouldn't crash :-)
    
    matches = NULL;
    matches = get_matches(records, 4, "robert");
    assert(matches[0] == 0);
    free(matches);
    
    printf ("*** if you got here, then the tests passed\n");
    return 0;
}
#endif
