-- Q0 --

spec1 (0, '#') = (0,  '#', 'l')
spec1 (0, 'a') = (1,  'a', 'l')
spec1 (0, 'b') = (1,  'a', 'l')
spec1 (0, 'c') = (1,  'a', 'l')
spec1 (0, 'd') = (1,  'a', 'l')
spec1 (1, '#') = (2,  '#', 'r')
spec1 (1, 'a') = (1,  'a', 'l')
spec1 (1, 'b') = (1,  'a', 'l')
spec1 (1, 'c') = (1,  'a', 'l')
spec1 (1, 'd') = (1,  'a', 'l')
spec1 (2, '#') = (100,'#', 'd')
spec1 (2, 'a') = (2,  'a', 'r')
spec1 (2, 'b') = (2,  'b', 'r')
spec1 (2, 'c') = (2,  'c', 'r')
spec1 (2, 'd') = (2,  'd', 'r')


val (x:xs, 0) = x
val (x:xs, n) = val (xs, n - 1)

startstring str = "#" ++ str ++ "#"
startpos str = length str + 1

str1 = "abcd"


chstr (x:xs, c, 0) = c:xs
chstr (x:xs, c, n) = x:(chstr (xs, c, n-1))


move (str, state, ch, pos) = (newstr, newstate, newch, newpos) where
                                 (newstate, oldch, newdir) = spec1 (state, ch)
                                 newstr = chstr (str, oldch, pos)
                                 newpos = poscalc pos newdir
                                 newch = val (newstr, newpos)

poscalc n 'l' = n - 1
poscalc n 'r' = n + 1
poscalc n 'd' = n

tup1 = (str1, 0, 'd', 3)
tup2 = (str1, 1, 'c', 2)


run inputtup = let (str, st, ch, pos) = move inputtup in
               if st /= 100
               then run (str, st, ch, pos)
               else (str, st, ch, pos)

startrun str = run (newstr, 0, startch, newpos) where
                   newstr = startstring str
                   newpos = startpos str
                   startch = val (newstr, newpos)

str2 = "bbccaa"
str3 = "bb#cd"



-- Q1 --
newmove tmspec (str, state, ch, pos) = (newstr, newstate, newch, newpos) where
                                           (newstate, oldch, newdir) = tmspec (state, ch)
                                           newstr = chstr (str, oldch, pos)
                                           newpos = poscalc pos newdir
                                           newch = val (newstr, newpos)

newrun tmspec inputtup = let (str, st, ch, pos) = newmove tmspec inputtup in
                         if st /= 100
                         then newrun tmspec (str, st, ch, pos)
                         else (str, st, ch, pos)

newstartrun tmspec str = newrun tmspec (newstr, 0, startch, newpos) where
                             newstr = startstring str
                             newpos = startpos str
                             startch = val (newstr, newpos)

{-
*Main> newstartrun spec1 str1
("#aaaa#",100,'#',5)
-}


-- Q2 --
spec2 (0, '#') = (1,  '#', 'l')
spec2 (0, 'a') = (0,  'a', 'l')
spec2 (0, 'b') = (0,  'b', 'l')
spec2 (0, 'c') = (0,  'c', 'l')
spec2 (0, 'd') = (0,  'd', 'l')
spec2 (1, '#') = (2,  '#', 'r')
spec2 (1, 'a') = (1,  'b', 'l')
spec2 (1, 'b') = (1,  'c', 'l')
spec2 (1, 'c') = (1,  'b', 'l')
spec2 (1, 'd') = (1,  'b', 'l')
spec2 (2, '#') = (100,'#', 'd')
spec2 (2, 'a') = (2,  'a', 'r')
spec2 (2, 'b') = (2,  'b', 'r')
spec2 (2, 'c') = (2,  'c', 'r')
spec2 (2, 'd') = (2,  'd', 'r')

{-
*Main> newstartrun spec2 str1
("#bcbb#",100,'#',5)
-}


-- Q3 --
spec3 (0, '#') = (1,  '#', 'l')
spec3 (0, 'a') = (0,  'a', 'l')
spec3 (0, 'b') = (0,  'b', 'l')
spec3 (0, 'c') = (0,  'c', 'l')
spec3 (0, 'd') = (0,  'd', 'l')
spec3 (1, '#') = (2,  '#', 'r')
spec3 (1, 'a') = (2,  'd', 'l')
spec3 (1, 'b') = (2,  'a', 'd')
spec3 (1, 'c') = (2,  'd', 'l')
spec3 (1, 'd') = (2,  'd', 'l')
spec3 (2, '#') = (100,'#', 'd')
spec3 (2, 'a') = (2,  'a', 'r')
spec3 (2, 'b') = (2,  'b', 'r')
spec3 (2, 'c') = (2,  'c', 'r')
spec3 (2, 'd') = (2,  'd', 'r')

{-
*Main> newstartrun spec3 str1
("#abcd#",100,'#',5)
*Main> newstartrun spec3 "ccad"
("#ccad#",100,'#',5)
-}


-- Q4 --
spec4 (0, '#') = (100, 'a', 'r')
spec4 (0, x) = (100, x, 'r')

{-
*Main> newstartrun spec4 "aaa"
("#aaaa",100,*** Exception: sakLab8.hs:(20,1)-(21,31): Non-exhaustive patterns in function val

Head moves out of the tape. Trying to fetch a char but it is beyond the string
-}


-- Q5 --
move2 tmspec (str, state, ch, pos) = (newstr, newstate, newch, newpos) where
                                         (newstate, oldch, newdir) = tmspec (state, ch)
                                         newpos = poscalc pos newdir
                                         tempstr = chstr (str, oldch, pos)
                                         newstr = pad newpos tempstr
                                         newch = val (newstr, newpos)

pad pos str = if pos >= length str
              then pad pos (str ++ "#")
              else str

run2 tmspec inputtup = let (str, st, ch, pos) = move2 tmspec inputtup in
                       if st /= 100
                       then run2 tmspec (str, st, ch, pos)
                       else (str, st, ch, pos)

startrun2 tmspec str = run2 tmspec (newstr, 0, startch, newpos) where
                           newstr = startstring str
                           newpos = startpos str
                           startch = val (newstr, newpos)
