"""
class Node {
    int item;
    Node next;
}

given head Node a,

Node b = null;
Node temp = null;

while (a != null) {
    temp = a;
    a = a.next;
    temp.next = b;
    b = temp;
}

a = b 

class Stack {
    Node head;

    Stack() {
        head = null;
    }

    void push(int a) {
        Node temp = new Node();
        temp.item = a;
        temp.next = head;
        head = temp
    }

    int pop() {
        if (head == null) {
            error("fail");
        }
        else {
            Node temp = head;
            head = head.next;
            return temp.item;
        }
    }

    boolean isEmpty() {
        return head == null;
    }
}



class Queue {
    Node head;
    Node tail;

    Queue() {
        head = null;
        tail = null;
    }

    void push(int a) {
        Node temp = new Node();
        temp.item = a;
        if (head == null) {
            head = temp;
            tail = temp;
        }
        else {
            tail.next = temp;
            tail = tail.next;
        }
    }

    int pop() {
        int a = 0;
        if (head == null) {
            error("beep");
        }
        else if (head == tail) {
            a = head.item;
            head = null;
            tail = null;
        }
        else {
            a = head.item;
            head = head.next;
        }

        return a;
    }
}



class SQueue {
    Stack front;
    Stack back;

    SQueue() {
        front = new Stack();
        back = new Stack();
    }
    
    void push(int a) {
        front.push(a);
    }

    int pop() {
        if (back.isEmpty()) {
            if (front.isEmpty()) {
                error("empty");
            }
            else {
                while (!front.isEmpty()) {
                    back.push(front.pop());
                }
            }
        }
        return back.pop();
    }
}


class Vector {
    int size;
    int[] arr;
    int i;
    
    Vector() {
        size = 10;
        arr = new arr[size];
        i = -1;
    }

    void resizing(boolean up) {
        int newsize = size;
        if (up) { newsize *= 2; }
        else { newsize /= 2; }

        int[] temp = new arr[size * 2];
        for (int j = 0; j <= i; j++) {
            temp[j] = arr[j];
        }
        arr = temp;
    }

    void doubling() {
        resizing(true);
    }

    void halving() {
        resizing(false);
    }

    void push(int a) {
        i++;
        if (i == size) {
            doubling();
        }
        arr[i] = a;
    }

    int pop() {
        if (i == -1) {
            error("empty");
        }
        int temp = arr[i];
        i--;
        if (i < size / 2 && size > 10) {
            halving();
        }
        return temp;
    }
}




class Hashmap {
    const size = 20;
    Node[] map;

    Hashmap() {
        map = new Node[20];
    }

    int hash(int a) {
        return a % size;
    }

    void push(int a) {
        int i = hash(a);
        Node temp = new Node();
        temp.item = a;
        Node pos = map[i];
        if (pos == null) {
            map[i] = temp;
            return;
        }
        while (pos.next != null) {
            if (pos.item == a) {
                return;
            }
            pos = pos.next;
        }
        pos.next = temp;
    }


}
"""


import random


def binsearch(arr, num):
    if len(arr) < 1:
        return -1

    begin = 0;
    end = len(arr) - 1
    mid = (begin + end) / 2

    while end - begin > 0:
        if (arr[mid] < num):
            begin = mid + 1
        elif (arr[mid] > num):
            end = mid - 1
        else:
            return mid;
        mid = (begin + end) / 2

    if arr[mid] == num:
        return mid
    else:
        return -1


def binsearch2(arr, num):
    end = len(arr)
    start = 0
    while (end > start):
        mid = (end + start) / 2
        if arr[mid] == num:
            return mid;
        elif arr[mid] > num:
            end = mid
        else:
            start = mid + 1
    return -1


for i in range(0, 20):
    arr = sorted(random.randint(0, 40) for j in range(20))
    num = random.randint(0, 40)
    s = binsearch(arr, num)
    m = binsearch2(arr, num)
    if s != m:
        print arr
        print num
        print binsearch(arr, num)
        print binsearch2(arr, num)
