# sublim.py
""" Test suite for subliminal influence of image
    Copyright (c) 2014, Sak Lee
    All rights reserved.
    Released under FreeBSD license.
    
    1. Pre-survey
    2. Series of questions
    2-1. Cross for 1500ms
    2-2. Picture for 16ms
    2-3. Mask for 350ms
    2-4. Word until correct keypress
    3. Post-survey
    4. Save data
    (5. Repeat until 'r' or 'q')

    -A note to whoever maintains the code in the future:
    I know this code is ugly as crap and not Pythonic,
    but I don't have time to explore OOP system of Pyglet.
    """

import pyglet
from pyglet.window import key
from pyglet.gl import *
import csv
import sys
import time
import random
import itertools
import copy
import cProfile

sleep = lambda x: time.sleep(x / 1000)

#
# Globals
#
imgToBlit = None
wordToDisplay = None

#
# Window setting
#
color_bg = 132/255, 132/255, 132/255, 1
winWidth = 1366
winHeight = 768
window = pyglet.window.Window(winWidth, winHeight, fullscreen=True, vsync=False)
pyglet.clock.set_fps_limit(None)
fps = 120
#fpsDisplay = pyglet.clock.ClockDisplay(color=(0,0,0,1))

#
# Define all images
#
imgFace = dict()
for line in open('faces.txt'):
    lineList = line.split()
    if lineList[0] not in {'#', '##'} :
        imgFace[int(lineList[0])] = pyglet.resource.image(lineList[1])
'''
imgFace = {
        1 :  pyglet.resource.image('faces/01Adams.jpeg'),
        2 :  pyglet.resource.image('faces/02Bustos.jpeg'),
        3 :  pyglet.resource.image('faces/03Cummings.jpeg'),
        4 :  pyglet.resource.image('faces/04Edwards.jpeg'),
        5 :  pyglet.resource.image('faces/05Fincher.jpeg'),
        6 :  pyglet.resource.image('faces/06Huffman.jpeg'),
        7 :  pyglet.resource.image('faces/07JacksonLee.jpeg'),
        8 :  pyglet.resource.image('faces/08Jenkins.jpeg'),
        9 :  pyglet.resource.image('faces/09Kilpatrick.jpeg'),
        10 : pyglet.resource.image('faces/10Maffei.jpeg'),
        11 : pyglet.resource.image('faces/11McKinney.jpeg'),
        12 : pyglet.resource.image('faces/12Schwartz.jpeg'),
        13 : pyglet.resource.image('faces/13Scott.jpeg'),
        14 : pyglet.resource.image('faces/14Veasey.jpeg'),
        15 : pyglet.resource.image('faces/15Watts.jpeg'),
        16 : pyglet.resource.image('faces/16Wilson.jpeg') }
'''
imgMask = []
for line in open('masks.txt'):
    lineList = line.split()
    if lineList[0] not in {'#', '##'} :
        imgMask.append(pyglet.resource.image(lineList[1]))

imgCross = pyglet.resource.image('faces/00Cross.jpeg')
imgEmpty = pyglet.resource.image('faces/00Empty.jpeg')

#
# Center the images
#
def center_image(image):
    """Sets an image's anchor point to its center"""
    image.anchor_x = image.width/2
    image.anchor_y = image.height/2

for value in imgFace.values():
    center_image(value)

for mask in imgMask: center_image(mask)
center_image(imgCross)
center_image(imgEmpty)


#
# Prepare word dictionary
#
wordDict = {}
wordDivide, wordTemp = 0, 0
for line in open('words.txt'):
    lineList = line.split()
    if lineList[0] not in {'#', '##'} :
        wordDict[int(lineList[0])] = lineList[1]
        wordTemp = int(lineList[0])
    elif lineList[0] == '##':
        wordDivide = wordTemp


#
# Permutation of face:word
#
allQuestions = list(itertools.product(imgFace.keys(), wordDict.keys()))


#
# Basic Labels
#
textControl = pyglet.text.Label('Q: quit / R: restart',
                            font_name='Times New Roman',
                            font_size=16, color=(0, 0, 0, 255),
                            x=window.width-120, y=window.height-50, bold=True,
                            anchor_x='center', anchor_y='center')

textRoom = pyglet.text.Label('Z: Room',
                            font_name='Times New Roman',
                            font_size=20, color=(0, 0, 0, 255),
                            x=100, y=50, bold=True,
                            anchor_x='center', anchor_y='center')

textPerson = pyglet.text.Label('/: Person',
                            font_name='Times New Roman',
                            font_size=20, color=(0, 0, 0, 255),
                            x=window.width-100, y=50, bold=True,
                            anchor_x='center', anchor_y='center')

textProceed = pyglet.text.Label('Tab: next / P: proceed.',
                            font_name='Times New Roman',
                            font_size=30, color=(0, 0, 0, 255),
                            x=window.width/2, y=50, bold=True,
                            anchor_x='center', anchor_y='center')

#
# Input cases
#
inputNumber = { key.NUM_0 : 0, key.NUM_1 : 1, key.NUM_2 : 2,
                key.NUM_3 : 3, key.NUM_4 : 4, key.NUM_5 : 5,
                key.NUM_6 : 6, key.NUM_7 : 7, key.NUM_8 : 8, key.NUM_9 : 9 }

inputControl = { key.BACKSPACE, key.UP, key.DOWN, key.P }

def legalInput(symbol):
    return symbol in inputNumber or symbol in inputControl


#
# Control Structure
#
class TestSuite:
    def __init__(self):
        # programPhase-0: pre-survey, 1: questions, 2: post-survey, 3: savedata
        self.programPhase = 0
        # questionPhase-0: load question, 1: cross, 2: face, 3: mask, 4: word
        self.questionPhase = 0

        # Copy from original question list and shuffle it
        self.questionList = copy.deepcopy(allQuestions)
        random.shuffle(self.questionList)
        # tuple of (face#, word#)
        self.currentQuestion = None
        # use by resultList.append((*currentQuestion, answer, reactionTime))
        self.resultList = []

        # image to display
        self.img = imgCross
        # face to display
        self.face = None
        # word to display
        self.word = None
        # mask to display
        self.mask = None

        # timer for counting time
        self.timer = 0
        # was there any key input?
        self.keyInput = False
        # transition between phases
        self.proceed = False
        # how long does it take to draw and erase a frame?
        self.debugFaceTime = 0
        # on which element of survey you are working on?
        self.cursorFocus = 0
        # was data saved?
        self.savedData = False

        # finished pre-survey?
        self.preSurveyDone = False
        # id # of the test subject
        self.id = ''
        # gender: 1=Male, 2=Female, 3=Other, 0=X
        self.gender = 0
        # ethnicity: 1=White, 2=Black, 3=Hisp/Lat, 4=Asian, 5=NatAm, 6=Mult, 0=X
        self.ethnicity = 0
        # age
        self.age = 0

        # finished post-survey?
        self.postSurveyDone = False
        # Political orientation, 1 to 7
        self.polDem = 0 # democrats
        self.polRep = 0 # republicans
        self.polInd = 0 # independents
        self.polLib = 0 # liberals
        self.polCon = 0 # conservatives

    def reset(self):
        # create random order of questions
        self.questionList = copy.deepcopy(allQuestions)
        random.shuffle(self.questionList)
        # reset everything
        self.programPhase = 1
        self.questionPhase = 0

        self.currentQuestion = None
        self.resultList = []

        self.img = imgCross
        self.face = None
        self.word = None
        self.mask = None

        self.timer = 0
        self.keyInput = False
        self.proceed = False
        self.debugFaceTime = 0
        self.cursorFocus = 0
        self.savedData = False

        self.preSurveyDone = False
        self.id = ''
        self.gender = 0
        self.ethnicity = 0
        self.age = 0
        
        self.postSurveyDone = False
        self.polDem = 0
        self.polRep = 0
        self.polInd = 0
        self.polLib = 0
        self.polCon = 0

    def loadQuestion(self):
        self.currentQuestion = self.questionList.pop()
        self.face = imgFace[self.currentQuestion[0]]
        self.word = pyglet.text.Label(wordDict[self.currentQuestion[1]],
                            font_name='Times New Roman',
                            font_size=42, color=(0, 0, 0, 255),
                            x=window.width/2, y=window.height/2,
                            anchor_x='center', anchor_y='center')
        self.mask = random.choice(imgMask)
    
    def answerInput(self, answer):
        self.appendAnswer(answer)
        self.keyInput = True

    def appendAnswer(self, answer):
        if self.keyInput:
            return
        if (answer == 'Upper' and self.currentQuestion[1] > wordDivide) or \
           (answer == 'Lower' and self.currentQuestion[1] <= wordDivide):
            correct = 1
        else:
            correct = 0

        numFace, numWord = self.currentQuestion
        resultTuple = numFace, numWord, correct, self.timer
        self.resultList.append(resultTuple)

        debugStr = str(correct) + ', ' + str(int(self.timer)) + " ms"
        self.debugText = pyglet.text.Label(debugStr,
            font_name='Times New Roman',
            font_size=42, color=(0, 0, 0, 255),
            x=window.width/2, y=window.height/2,
            anchor_x='center', anchor_y='center')

    def advanceProgramPhase(self):
        self.programPhase = (self.programPhase + 1) % 4

    def advanceQuestionPhase(self):
        self.timer = 0
        self.questionPhase = (self.questionPhase + 1) % 6

    def keyInput(self, symbol):
        if self.programPhase == 0:
            if symbol == key.P:
                self.preSurveyDone = True
        elif self.programPhase == 2:
            if symbol == key.P:
                self.postSurveyDone = True

    def update(self, dt):
        if self.programPhase == 0:
            if self.preSurveyDone:
                self.advanceProgramPhase()

        elif self.programPhase == 1:
            if self.questionPhase == 0: # Load question
                self.advanceQuestionPhase()
                self.loadQuestion()
                self.img = imgCross

            elif self.questionPhase == 1: # Show cross
                self.timer += 1000/fps
                if self.timer >= 1500:
                    self.advanceQuestionPhase()
                    self.img = self.face
                    self.debugFaceTime = time.time()

            elif self.questionPhase == 2: # Show face
                self.timer += 1000/fps
                if self.timer >= 12:
                    self.advanceQuestionPhase()
                    self.img = self.mask
                    print(1000 * (time.time() - self.debugFaceTime))
                    self.debugFaceTime = 0

            elif self.questionPhase == 3: # Show mask
                self.timer += 1000/fps
                #self.img = random.choice(imgMask)
                if self.timer >= 350:
                    self.advanceQuestionPhase()
                    self.img = imgCross

            elif self.questionPhase == 4:
                self.timer += 1000/fps
                if self.keyInput:
                    self.keyInput = False
                    self.advanceQuestionPhase()
                    if not self.questionList:
                        self.programPhase = 2

            elif self.questionPhase == 5:
                self.timer += 1000/fps
                if self.timer >= 1500:
                    self.advanceQuestionPhase()
        
        elif self.programPhase == 2:
            if self.postSurveyDone:
                self.advanceProgramPhase()

        elif self.programPhase == 3:
            if not self.savedData:
                self.save()
            self.timer += 1000/fps
            if self.timer >= 5000:
                self.reset()


program = TestSuite()

pyglet.clock.schedule_interval(program.update, 1/fps)

@window.event
def on_draw():
    pyglet.gl.glClearColor(*color_bg)
    window.clear()
    # Label for quit and restart
    textControl.draw()

    if program.programPhase == 0:
        textProceed.draw()

    elif program.programPhase == 1:
        textRoom.draw()
        textPerson.draw()
        if program.questionPhase in {1, 2, 3}:
            program.img.blit(winWidth / 2, winHeight / 2)
        elif program.questionPhase == 4:
            program.word.draw()
        elif program.questionPhase == 5:
            program.debugText.draw()

    elif program.programPhase == 2:
        textProceed.draw()

    elif program.programPhase == 3:
        pass

@window.event
def on_key_press(symbol, modifiers):
    if symbol == key.ESCAPE:
        return True
    elif symbol == key.Q:
        window.on_close()
    elif symbol == key.R:
        program.reset()
    elif program.programPhase == 0:
        if legalInput(symbol):
            program.keyInput(symbol)
    elif program.programPhase == 1 and program.questionPhase == 4:
        if symbol == key.SLASH:
            program.answerInput('Lower')
        if symbol == key.Z:
            program.answerInput('Upper')


def main():
    pyglet.app.run()
    #cProfile.run('pyglet.app.run()', filename='profile.log')

if __name__ == "__main__":
    main()
