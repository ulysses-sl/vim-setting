import ddf.minim.*;
import ddf.minim.analysis.*;

Minim minim;
AudioPlayer player;
AudioInput input;
FFT fft;

int counter;
float noiseAcc;
float x, y;
int sampleConst[];

// for constant multiples
float rConst[];
float radConst[];
float radCurrent[];

void shifter(float r, float rad)
{
  float dx = r * cos(rad);
  float dy = r * sin(rad);
  x += dx;
  y += dy;
}

float noiseGen(float current)
{
  noiseAcc += 0.005;
  if (random(-1, 1) >= current)
  {
    return noise(noiseAcc);
  }
  else
  {
    return -1 * noise(noiseAcc);
  }
}

void setup()
{
  size(1024, 400);
  x = width / 2;
  y = height / 2;

  minim = new Minim(this);
  input = minim.getLineIn();
  //player = minim.loadFile("happy.mp3");
  //player.play();

  fft = new FFT(input.bufferSize(), input.sampleRate());
  sampleConst = new int[5];
  rConst = new float[5];
  radConst = new float[5];
  radCurrent = new float[5];
  for (int i = 0; i < sampleConst.length; i++)
  {
    sampleConst[i] = floor(random(fft.specSize()));
    rConst[i] = random(5, 10);
    radConst[i] = random(-0.01, 0.01);
  }
}

void draw()
{
  background(0, 5);
  stroke(255);

  if (counter >= 180)
  {
    counter = 0;
    for (int i = 0; i < sampleConst.length; i++)
    {
      sampleConst[i] = floor(random(fft.specSize()));
      rConst[i] = random(5, 10);
      radConst[i] = random(-0.01, 0.01);
    }
  }
  counter += 1;
  //dx = noiseGen(dx);
  //dy = noiseGen(dx);

  fft.forward(input.mix);
  println(fft.specSize());
  for (int i = 0; i < sampleConst.length; i++)
  {
    float bandPower = fft.getBand(sampleConst[i]);
    shifter(rConst[i], radCurrent[i]);
    radCurrent[i] += radConst[i] * bandPower;
  }

  if (x > width || x < 0)
  {
    x = (x + width) % width;
  }
  if (y > height || y < 0)
  {
    y = (y + height) % height;
  }

  for (int i = 0; i < 10; i++)
  {
    for (int j = 0; j < 10; j++)
    {
      ellipse(x + (i - 4) * 10, y + (j - 4) * 10, 5, 5);
    }
  }
  //ellipse(x, y, 5, 5);
}
